---
import Logo from '../components/Logo.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import HamburgerIcon from '../components/icons/HamburgerIcon.astro';
import XIcon from '../components/icons/XIcon.astro';

const navItems = [
    { linkText: 'Home', href: '/' },
    { linkText: 'How It Works', href: '#benefits' },
    { linkText: 'Success Stories', href: '#testimonials' },
    { linkText: 'FAQ', href: '/faq' },
    { linkText: 'About Us', href: '/about' },
    { linkText: 'Blog', href: '/blog' }
];
---

<header class="header-section fixed top-0 left-0 right-0 z-50 transition-all duration-300" id="main-header">
    <div class="container mx-auto px-4">
        <nav class="flex justify-between items-center py-4">
            <!-- Logo with text -->
            <div class="logo-container flex items-center">
                <a href="/" class="nav-link inline-flex items-center gap-3" aria-label="Debt Freedom Toolkit">
                    <Logo />
                    <span class="text-lg md:text-xl font-bold text-[#2d7984] dark:text-[#58cbe0] hidden sm:inline-block">DebtFreedomToolkit.com</span>
                </a>
            </div>
            
            <!-- Desktop Navigation and Theme Toggle -->
            <div class="hidden md:flex md:items-center md:gap-4">
                {
                    !!navItems?.length && (
                        <ul class="flex items-center gap-x-6">
                            {navItems.map((item) => (
                                <li>
                                    <a 
                                        href={item.href} 
                                        class="nav-link inline-block px-1.5 py-1 text-gray-900 dark:text-gray-100 hover:text-[#2d7984] dark:hover:text-[#58cbe0] font-medium transition-colors relative no-underline after:absolute after:bottom-0 after:left-0 after:right-0 after:h-0.5 after:bg-[#2d7984] dark:after:bg-[#58cbe0] after:transform after:scale-x-0 after:origin-bottom-right after:transition-transform hover:after:scale-x-100 hover:after:origin-bottom-left"
                                    >
                                        {item.linkText}
                                    </a>
                                </li>
                            ))}
                            <li>
                                <a 
                                    href="#consultation" 
                                    class="btn ml-4 bg-[#2d7984] hover:bg-[#1d5058] text-white font-semibold"
                                >
                                    Get Started
                                </a>
                            </li>
                        </ul>
                    )
                }
                <ThemeToggle />
            </div>
            
            <!-- Mobile Menu Button -->
            <div class="block md:hidden">
                <div class="flex items-center gap-2">
                    <ThemeToggle />
                    <button id="mobile-menu-button" class="flex items-center p-2 rounded-lg text-gray-900 dark:text-gray-100 hover:text-[#2d7984] dark:hover:text-[#58cbe0] focus:outline-none focus:ring-2 focus:ring-[#2d7984] dark:focus:ring-[#58cbe0]" aria-expanded="false" aria-controls="mobile-menu" aria-label="Toggle menu">
                        <HamburgerIcon class="w-6 h-6" />
                    </button>
                </div>
            </div>
        </nav>
    </div>
    
    <!-- Mobile Menu (Hidden by default) -->
    <div id="mobile-menu" class="hidden bg-white dark:bg-gray-800 shadow-lg absolute left-0 right-0 top-full border-t border-gray-200 dark:border-gray-700 animate-fade-in">
        <div class="container mx-auto px-4 py-4">
            <ul class="flex flex-col gap-y-3">
                {navItems.map((item) => (
                    <li>
                        <a 
                            href={item.href} 
                            class="nav-link block py-2 px-4 hover:bg-[#2d7984]/10 dark:hover:bg-[#58cbe0]/20 rounded-lg font-medium transition-colors text-gray-900 dark:text-gray-100 no-underline"
                        >
                            {item.linkText}
                        </a>
                    </li>
                ))}
                <li class="mt-2">
                    <a 
                        href="#consultation" 
                        class="btn w-full text-center bg-[#2d7984] hover:bg-[#1d5058] text-white font-semibold"
                    >
                        Get Started
                    </a>
                </li>
            </ul>
        </div>
    </div>
</header>

<!-- Add padding top to account for fixed header -->
<div class="pt-20"></div>

<script>
    // Header scroll behavior
    document.addEventListener('DOMContentLoaded', () => {
        const header = document.getElementById('main-header');
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        let lastScrollY = window.scrollY;
        
        // Function to update header state
        const updateHeaderState = () => {
            const scrollY = window.scrollY;
            
            // Add shadow and background when scrolled
            if (scrollY > 10) {
                header.classList.add('bg-white/95', 'dark:bg-gray-900/95', 'backdrop-blur-md', 'shadow-lg', 'dark:shadow-gray-900', 'border-b', 'border-gray-200', 'dark:border-gray-700');
            } else {
                header.classList.remove('bg-white/95', 'dark:bg-gray-900/95', 'backdrop-blur-md', 'shadow-lg', 'dark:shadow-gray-900', 'border-b', 'border-gray-200', 'dark:border-gray-700');
            }
            
            // Hide header when scrolling down, show when scrolling up
            if (scrollY > lastScrollY && scrollY > 200) {
                header.classList.add('-translate-y-full');
            } else {
                header.classList.remove('-translate-y-full');
            }
            
            lastScrollY = scrollY;
        };
        
        // Toggle mobile menu
        mobileMenuButton?.addEventListener('click', () => {
            const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
            mobileMenuButton.setAttribute('aria-expanded', !expanded);
            
            if (!expanded) {
                mobileMenu.classList.remove('hidden');
                // Change hamburger to X
                mobileMenuButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>`;
            } else {
                mobileMenu.classList.add('hidden');
                // Change X to hamburger
                mobileMenuButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>`;
            }
        });
        
        // Close mobile menu when clicking on a link
        document.querySelectorAll('#mobile-menu a').forEach(link => {
            link.addEventListener('click', () => {
                mobileMenu.classList.add('hidden');
                mobileMenuButton.setAttribute('aria-expanded', 'false');
                // Change X to hamburger
                mobileMenuButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>`;
            });
        });
        
        // Set initial header state
        updateHeaderState();
        
        // Update header state on scroll
        window.addEventListener('scroll', updateHeaderState);
        
        // Handle smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                
                const targetId = this.getAttribute('href');
                if (targetId === '#') return;
                
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    const headerHeight = header.offsetHeight;
                    const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY - headerHeight;
                    
                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }
            });
        });
    });
</script>