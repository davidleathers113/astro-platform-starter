---
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sun-icon">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="moon-icon">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
</button>

<style>
    .theme-toggle {
        background: transparent;
        border: none;
        border-radius: 50%;
        padding: 0.5rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--color-primary);
        transition: all 0.2s ease;
    }
    
    .theme-toggle:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    .sun-icon, .moon-icon {
        transition: transform 0.2s ease;
    }
    
    :global(.light-theme) .sun-icon {
        display: block;
    }
    
    :global(.light-theme) .moon-icon {
        display: none;
    }
    
    :global(.dark-theme) .sun-icon {
        display: none;
    }
    
    :global(.dark-theme) .moon-icon {
        display: block;
    }
</style>

<script>
    // Set initial theme based on localStorage or system preference
    function setInitialTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            document.documentElement.classList.add(savedTheme + '-theme');
            document.documentElement.setAttribute('data-theme', savedTheme);
        } else {
            // Default to dark theme
            document.documentElement.classList.add('dark-theme');
            document.documentElement.setAttribute('data-theme', 'dark');
            localStorage.setItem('theme', 'dark');
        }
    }
    
    // Toggle between light and dark themes
    function toggleTheme() {
        const isDark = document.documentElement.classList.contains('dark-theme');
        document.documentElement.classList.remove(isDark ? 'dark-theme' : 'light-theme');
        document.documentElement.classList.add(isDark ? 'light-theme' : 'dark-theme');
        
        const newTheme = isDark ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    }
    
    // Initialize theme
    setInitialTheme();
    
    // Set up event listener for theme toggle
    document.getElementById('theme-toggle')?.addEventListener('click', toggleTheme);
</script>
