---
// src/components/debt-relief/FAQItem.astro
import ChevronIcon from './ChevronIcon.astro';

interface Props {
    question: string;
    answer: string;
}

const { question, answer } = Astro.props;
const id = `faq-${Math.floor(Math.random() * 1000)}`;
---

<div class="faq-item mb-4 bg-background-form rounded-lg overflow-hidden shadow-md border border-border hover:shadow-lg transition-all duration-300" style="position: relative; z-index: 1;">
    <button 
        class="faq-question w-full p-5 text-left flex justify-between items-center hover:bg-background-form/60 transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
        aria-expanded="false" 
        aria-controls={id}
    >
        <span class="font-semibold">{question}</span>
        <span class="flex-shrink-0 ml-2">
            <ChevronIcon />
        </span>
    </button>
    <div id={id} class="faq-answer hidden overflow-hidden p-5 pt-0 bg-background-form border-t-0 border-border" aria-hidden="true">
        <div class="faq-content transform transition-all duration-300 opacity-0 translate-y-4">
            <p class="text-text py-4 leading-relaxed">{answer}</p>
        </div>
    </div>
</div>

<style>
    .faq-item {
        transform: translateZ(0); /* Force hardware acceleration */
        will-change: transform, box-shadow; /* Optimize for animation */
    }
    
    .faq-question:hover {
        background-color: rgba(var(--color-form-bg-rgb), 0.7);
    }
    
    /* Enhanced focus outline for better accessibility */
    .faq-question:focus-visible {
        outline: none;
        box-shadow: 0 0 0 3px var(--color-primary);
    }
    
    /* Improved focus styles for dark mode */
    .dark .faq-question:focus-visible {
        box-shadow: 0 0 0 3px #58cbe0; /* Brighter in dark mode */
    }
    
    /* Smooth height transition for FAQ answers */
    .faq-answer {
        transition: all 0.3s ease-out;
        max-height: 0;
    }
    
    .faq-answer:not(.hidden) {
        max-height: 500px; /* Large enough to fit content */
    }
    
    /* Visible state for FAQ content */
    .faq-content {
        opacity: 0;
        transform: translateY(10px);
        transition: opacity 0.3s ease-out, transform 0.3s ease-out;
    }
    
    .faq-content.visible {
        opacity: 1;
        transform: translateY(0);
    }
    
    /* Chevron animation - Use :global() to target child component class */
    .faq-question[aria-expanded="true"] :global(.chevron-icon) {
        transform: rotate(180deg);
    }
</style>

<script>
    // Enhanced client-side script for accordion functionality with animations
    document.addEventListener('astro:page-load', () => {
        const faqItems = document.querySelectorAll('.faq-item');
        
        faqItems.forEach(item => {
            const button = item.querySelector('.faq-question');
            const answer = item.querySelector('.faq-answer');
            const content = item.querySelector('.faq-content');
            
            if (button && answer && content) {
                button.addEventListener('click', () => {
                    const expanded = button.getAttribute('aria-expanded') === 'true';
                    
                    // Toggle aria states
                    button.setAttribute('aria-expanded', expanded ? 'false' : 'true');
                    answer.setAttribute('aria-hidden', expanded ? 'true' : 'false');
                    
                    if (expanded) {
                        // Closing the FAQ
                        content.classList.remove('visible');
                        // No need to manually set transform, it's handled by CSS
                        
                        // Wait for content animation to complete before hiding
                        setTimeout(() => {
                            answer.classList.add('hidden');
                        }, 300);
                    } else {
                        // Opening the FAQ
                        answer.classList.remove('hidden');
                        
                        // Small delay for the content animation
                        setTimeout(() => {
                            content.classList.add('visible');
                            // No need to manually set transform, it's handled by CSS
                        }, 10);
                    }
                });
            }
        });
        
        // Add keyboard navigation for accessibility
        faqItems.forEach((item, index) => {
            const button = item.querySelector('.faq-question');
            
            if (button) {
                button.addEventListener('keydown', (e) => {
                    // Up arrow key
                    if (e.key === 'ArrowUp' && index > 0) {
                        e.preventDefault();
                        faqItems[index - 1].querySelector('.faq-question').focus();
                    }
                    // Down arrow key
                    else if (e.key === 'ArrowDown' && index < faqItems.length - 1) {
                        e.preventDefault();
                        faqItems[index + 1].querySelector('.faq-question').focus();
                    }
                    // Home key
                    else if (e.key === 'Home') {
                        e.preventDefault();
                        faqItems[0].querySelector('.faq-question').focus();
                    }
                    // End key
                    else if (e.key === 'End') {
                        e.preventDefault();
                        faqItems[faqItems.length - 1].querySelector('.faq-question').focus();
                    }
                });
            }
        });
    });
    
    // For browsers that don't support astro:page-load event, also use DOMContentLoaded
    document.addEventListener('DOMContentLoaded', () => {
        if (!document.body.dataset.astroPageLoaded) {
            const event = new Event('astro:page-load');
            document.dispatchEvent(event);
            document.body.dataset.astroPageLoaded = 'true';
        }
    });
</script>
