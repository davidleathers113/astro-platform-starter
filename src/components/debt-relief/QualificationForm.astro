---
// src/components/debt-relief/QualificationForm.astro
---

<div id="qualification-form" class="p-6 sm:p-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg dark:shadow-gray-900 border border-gray-200 dark:border-gray-700 hover:shadow-xl dark:hover:shadow-gray-900/75 transition-all duration-300">
    <h3 class="mb-6 text-xl font-bold text-gray-900 dark:text-white">Quick Debt Relief Check</h3>
    
    <!-- Divider after header -->
    <div class="border-t border-gray-200 dark:border-gray-700 mb-6"></div>
    
    <!-- Success Message -->
    <div id="success-message" class="hidden mb-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
        <div class="flex items-center">
            <svg class="w-5 h-5 text-green-600 dark:text-green-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <div>
                <h4 class="text-green-800 dark:text-green-300 font-semibold">Submission Successful!</h4>
                <p class="text-green-700 dark:text-green-400 text-sm mt-1">Thank you for your submission! A debt relief specialist will contact you shortly.</p>
            </div>
        </div>
    </div>
    
    <!-- Error Message -->
    <div id="general-error" class="hidden mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
        <div class="flex items-center">
            <svg class="w-5 h-5 text-red-600 dark:text-red-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            <div>
                <h4 class="text-red-800 dark:text-red-300 font-semibold">Submission Error</h4>
                <p id="general-error-text" class="text-red-700 dark:text-red-400 text-sm mt-1"></p>
            </div>
        </div>
    </div>
    
    <form id="qualification-form-element" class="space-y-6">
        <div class="form-control animate-fade-in-delay-1">
            <label for="debt-amount" class="block mb-2 font-medium text-gray-900 dark:text-white">How much debt do you have?*</label>
            <select 
                id="debt-amount" 
                name="debtAmount" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                required
            >
                <option value="">Select Amount</option>
                <option value="10000-15000">$10,000 - $15,000</option>
                <option value="15000-25000">$15,000 - $25,000</option>
                <option value="25000-50000">$25,000 - $50,000</option>
                <option value="50000+">$50,000+</option>
            </select>
            <div id="debt-amount-error" class="error-message hidden mt-1"></div>
        </div>
        
        <div class="form-control animate-fade-in-delay-2">
            <label for="debt-type" class="block mb-2 font-medium text-gray-900 dark:text-white">What type of debt do you have?*</label>
            <select 
                id="debt-type" 
                name="debtType" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                required
            >
                <option value="">Select Type</option>
                <option value="credit-cards">Credit Cards</option>
                <option value="personal-loans">Personal Loans</option>
                <option value="medical">Medical Debt</option>
                <option value="mixed">Mixed Unsecured Debt</option>
            </select>
            <div id="debt-type-error" class="error-message hidden mt-1"></div>
        </div>
        
        <div class="form-control animate-fade-in-delay-3">
            <label for="phone" class="block mb-2 font-medium text-gray-900 dark:text-white">Phone Number*</label>
            <input 
                type="tel" 
                id="phone" 
                name="phone" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                placeholder="(000) 000-0000" 
                required
                aria-describedby="phone-format"
            />
            <small id="phone-format" class="text-gray-600 dark:text-gray-400">Format: (XXX) XXX-XXXX</small>
            <div id="phone-error" class="error-message hidden mt-1"></div>
        </div>
        
        <div class="form-control animate-fade-in-delay-4">
            <label for="email" class="block mb-2 font-medium text-gray-900 dark:text-white">Email Address (Optional)</label>
            <input 
                type="email" 
                id="email" 
                name="email" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                placeholder="your.email@example.com"
                aria-describedby="email-help"
            />
            <small id="email-help" class="text-gray-600 dark:text-gray-400">Receive confirmation and updates about your debt relief options</small>
            <div id="email-error" class="error-message hidden mt-1"></div>
        </div>
        
        <!-- GDPR Consent Section -->
        <div class="form-control animate-fade-in-delay-5">
            <fieldset class="border border-gray-300 dark:border-gray-600 rounded-lg p-4">
                <legend class="text-sm font-medium text-gray-900 dark:text-white px-2">Privacy and Consent</legend>
                
                <div class="space-y-3">
                    <!-- Required Data Processing Consent -->
                    <div class="flex items-start">
                        <input 
                            type="checkbox" 
                            id="consent-processing" 
                            name="consentProcessing" 
                            required
                            class="mt-1 w-4 h-4 text-primary bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded focus:ring-primary dark:focus:ring-primary-light focus:ring-2"
                        />
                        <label for="consent-processing" class="ml-3 text-sm text-gray-900 dark:text-white">
                            <span class="font-medium">I consent to the processing of my personal data*</span>
                            <span class="block text-gray-600 dark:text-gray-400 mt-1">
                                Required to process your debt relief inquiry and contact you with available options.
                            </span>
                        </label>
                    </div>
                    <div id="consent-processing-error" class="error-message hidden"></div>
                    
                    <!-- Optional Marketing Consent -->
                    <div class="flex items-start">
                        <input 
                            type="checkbox" 
                            id="consent-marketing" 
                            name="consentMarketing"
                            class="mt-1 w-4 h-4 text-primary bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded focus:ring-primary dark:focus:ring-primary-light focus:ring-2"
                        />
                        <label for="consent-marketing" class="ml-3 text-sm text-gray-900 dark:text-white">
                            <span class="font-medium">I consent to receive marketing communications (Optional)</span>
                            <span class="block text-gray-600 dark:text-gray-400 mt-1">
                                Receive updates about additional financial services that may benefit you.
                            </span>
                        </label>
                    </div>
                    
                    <!-- Privacy Policy Links -->
                    <div class="text-xs text-gray-600 dark:text-gray-400 pt-2 border-t border-gray-200 dark:border-gray-700">
                        By submitting this form, you agree to our 
                        <a href="/privacy-policy" target="_blank" class="text-primary dark:text-primary-light underline hover:no-underline">Privacy Policy</a> 
                        and 
                        <a href="/terms-of-service" target="_blank" class="text-primary dark:text-primary-light underline hover:no-underline">Terms of Service</a>.
                    </div>
                </div>
            </fieldset>
        </div>
        
        <!-- Divider before button -->
        <div class="border-t border-gray-200 dark:border-gray-700 pt-4"></div>
        
        <button 
            type="submit" 
            id="submit-button"
            class="w-full p-4 text-center font-bold btn btn-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all animate-pulse-once"
            aria-label="Submit form to check your savings options"
        >
            <span id="submit-text">Check Your Savings Options</span>
            <span id="submit-spinner" class="hidden">
                <svg class="inline w-5 h-5 mr-3 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="m100 50.5908c0 27.2899-22.2071 49.497-49.497 49.497s-49.497-22.2071-49.497-49.497c0-27.2899 22.2071-49.497 49.497-49.497s49.497 22.2071 49.497 49.497z" fill="currentColor"/>
                    <path d="m93.9676 39.0409c0-4.9706-4.0326-9.003-9.003-9.003s-9.003 4.0324-9.003 9.003c0 4.9706 4.0326 9.003 9.003 9.003s9.003-4.0324 9.003-9.003z" fill="currentFill"/>
                </svg>
                Submitting...
            </span>
        </button>
    </form>
    
    <p class="mt-6 text-xs text-gray-600 dark:text-gray-400 leading-relaxed">
        By submitting, you authorize DebtFreedom to contact you at the number provided using automated technology. 
        Your information is kept secure and confidential.
    </p>
</div>

<style>
    /* Theme-aware container with enhanced depth */
    #qualification-form {
        transition: all var(--theme-transition-duration) var(--theme-transition-easing);
    }
    
    /* Enhanced focus states for better accessibility with theme awareness */
    select:focus, input:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(45, 121, 132, 0.3);
    }
    
    /* Dark mode focus states */
    .dark select:focus, .dark input:focus {
        box-shadow: 0 0 0 3px rgba(88, 203, 224, 0.4);
    }
    
    /* Error states with high contrast and theme awareness */
    .error-message {
        color: #ef4444; /* Light mode error */
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    .dark .error-message {
        color: #fc8181; /* Dark mode error - lighter for better contrast */
    }
    
    .input-error {
        border-color: #ef4444 !important; /* Light mode error border */
    }
    
    .dark .input-error {
        border-color: #fc8181 !important; /* Dark mode error border */
    }
    
    /* Theme-aware placeholder styling */
    input::placeholder {
        transition: color var(--theme-transition-duration) var(--theme-transition-easing);
    }
    
    /* Improve form field appearance on mobile */
    @media (max-width: 640px) {
        select, input {
            font-size: 16px; /* Prevents iOS zoom on focus */
        }
    }
    
    /* Container hover effects with theme awareness */
    #qualification-form:hover {
        transform: translateY(-2px);
    }
    
    /* Divider styling with smooth transitions */
    .border-t {
        transition: border-color var(--theme-transition-duration) var(--theme-transition-easing);
    }
    
    /* Accessibility improvements */
    @media (prefers-reduced-motion: reduce) {
        #qualification-form,
        #qualification-form:hover,
        .border-t,
        input::placeholder {
            transition: none !important;
            transform: none !important;
        }
    }
    
    /* High contrast mode adjustments */
    @media (prefers-contrast: high) {
        #qualification-form {
            border-width: 2px;
        }
        
        select, input {
            border-width: 2px;
        }
    }
</style>

<script>
// Import cleave.js and US phone addon
import Cleave from 'cleave.js';
import 'cleave.js/dist/addons/cleave-phone.us';

// Client-side validation and form handling
document.addEventListener('DOMContentLoaded', async () => {
    const form = document.getElementById('qualification-form-element');
    
    // CSRF token management
    let csrfToken = null;
    let sessionId = null;
    
    // Fetch CSRF token on page load
    try {
        const csrfResponse = await fetch('/api/csrf-token');
        if (csrfResponse.ok) {
            const csrfData = await csrfResponse.json();
            csrfToken = csrfData.token;
            sessionId = csrfData.sessionId;
            console.log('CSRF token obtained successfully');
        } else {
            console.warn('Failed to obtain CSRF token');
        }
    } catch (error) {
        console.warn('Error fetching CSRF token:', error);
    }
    const phoneInput = document.getElementById('phone');
    const emailInput = document.getElementById('email');
    const debtAmountSelect = document.getElementById('debt-amount');
    const debtTypeSelect = document.getElementById('debt-type');
    const consentProcessingCheckbox = document.getElementById('consent-processing');
    const consentMarketingCheckbox = document.getElementById('consent-marketing');
    
    // Error elements
    const debtAmountError = document.getElementById('debt-amount-error');
    const debtTypeError = document.getElementById('debt-type-error');
    const phoneError = document.getElementById('phone-error');
    const emailError = document.getElementById('email-error');
    const consentProcessingError = document.getElementById('consent-processing-error');
    
    // UI elements
    const successMessage = document.getElementById('success-message');
    const generalError = document.getElementById('general-error');
    const generalErrorText = document.getElementById('general-error-text');
    const submitButton = document.getElementById('submit-button');
    const submitText = document.getElementById('submit-text');
    const submitSpinner = document.getElementById('submit-spinner');
    
    // Initialize cleave.js for phone formatting
    let phoneCleave = null;
    if (phoneInput) {
        phoneCleave = new Cleave(phoneInput, {
            phone: true,
            phoneRegionCode: 'US'
        });
        
        // Clear error when user types
        phoneInput.addEventListener('input', () => {
            clearError(phoneInput, phoneError);
        });
    }
    
    // Function to show success message
    const showSuccess = () => {
        hideMessages();
        successMessage.classList.remove('hidden');
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    };
    
    // Function to show general error
    const showGeneralError = (message) => {
        hideMessages();
        generalErrorText.textContent = message;
        generalError.classList.remove('hidden');
        generalError.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    };
    
    // Function to hide all messages
    const hideMessages = () => {
        successMessage.classList.add('hidden');
        generalError.classList.add('hidden');
    };
    
    // Function to show field error
    const showError = (element, errorElement, message) => {
        element.classList.add('input-error');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
    };
    
    // Function to clear field error
    const clearError = (element, errorElement) => {
        element.classList.remove('input-error');
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
    };
    
    // Function to set loading state
    const setLoadingState = (loading) => {
        if (loading) {
            submitButton.disabled = true;
            submitButton.classList.add('opacity-75', 'cursor-not-allowed');
            submitText.classList.add('hidden');
            submitSpinner.classList.remove('hidden');
        } else {
            submitButton.disabled = false;
            submitButton.classList.remove('opacity-75', 'cursor-not-allowed');
            submitText.classList.remove('hidden');
            submitSpinner.classList.add('hidden');
        }
    };
    
    // Clear errors when user interacts with fields
    debtAmountSelect && debtAmountSelect.addEventListener('change', () => clearError(debtAmountSelect, debtAmountError));
    debtTypeSelect && debtTypeSelect.addEventListener('change', () => clearError(debtTypeSelect, debtTypeError));
    emailInput && emailInput.addEventListener('input', () => clearError(emailInput, emailError));
    consentProcessingCheckbox && consentProcessingCheckbox.addEventListener('change', () => clearError(consentProcessingCheckbox, consentProcessingError));
    
    // Form submission
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            let isValid = true;
            
            // Hide any previous messages
            hideMessages();
            
            // Clear any previous field errors
            clearError(debtAmountSelect, debtAmountError);
            clearError(debtTypeSelect, debtTypeError);
            clearError(phoneInput, phoneError);
            clearError(emailInput, emailError);
            clearError(consentProcessingCheckbox, consentProcessingError);
            
            // Validate debt amount
            if (!debtAmountSelect.value) {
                showError(debtAmountSelect, debtAmountError, 'Please select your debt amount');
                isValid = false;
            }
            
            // Validate debt type
            if (!debtTypeSelect.value) {
                showError(debtTypeSelect, debtTypeError, 'Please select your debt type');
                isValid = false;
            }
            
            // Validate phone using cleave.js getRawValue()
            const rawPhone = phoneCleave ? phoneCleave.getRawValue() : phoneInput.value.replace(/\D/g, '');
            if (!rawPhone || rawPhone.length !== 10) {
                showError(phoneInput, phoneError, 'Please enter a valid 10-digit phone number');
                isValid = false;
            }
            
            // Validate email (optional, but if provided must be valid)
            const emailValue = emailInput.value.trim();
            if (emailValue && !isValidEmail(emailValue)) {
                showError(emailInput, emailError, 'Please enter a valid email address');
                isValid = false;
            }
            
            // Validate required consent
            if (!consentProcessingCheckbox.checked) {
                showError(consentProcessingCheckbox, consentProcessingError, 'You must consent to data processing to submit this form');
                isValid = false;
            }
            
            if (!isValid) {
                // Scroll to first error
                const firstError = document.querySelector('.input-error');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                return;
            }
            
            // Set loading state
            setLoadingState(true);
            
            try {
                // Prepare submission data
                const submissionData = {
                    debtAmount: debtAmountSelect.value,
                    debtType: debtTypeSelect.value,
                    phone: rawPhone,
                    email: emailValue || undefined,
                    consentProcessing: consentProcessingCheckbox.checked,
                    consentMarketing: consentMarketingCheckbox.checked,
                    source: 'qualification-form'
                };
                
                // Prepare headers with CSRF token
                const headers = {
                    'Content-Type': 'application/json'
                };
                
                if (csrfToken) {
                    headers['x-csrf-token'] = csrfToken;
                }
                
                // Submit to API
                const response = await fetch('/api/leads', {
                    method: 'POST',
                    headers,
                    body: JSON.stringify(submissionData)
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    // Success - show success message and reset form
                    showSuccess();
                    
                    // Reset form and cleave instance
                    form.reset();
                    if (phoneCleave) {
                        phoneCleave.setRawValue('');
                    }
                    
                    // Optional: Track success event for analytics
                    console.log('Lead submitted successfully:', result.leadId);
                    
                } else {
                    // Handle API errors
                    if (result.errors) {
                        let hasFieldErrors = false;
                        
                        // Show field-specific errors
                        Object.entries(result.errors).forEach(([field, message]) => {
                            switch (field) {
                                case 'debtAmount':
                                    showError(debtAmountSelect, debtAmountError, message);
                                    hasFieldErrors = true;
                                    break;
                                case 'debtType':
                                    showError(debtTypeSelect, debtTypeError, message);
                                    hasFieldErrors = true;
                                    break;
                                case 'phone':
                                    showError(phoneInput, phoneError, message);
                                    hasFieldErrors = true;
                                    break;
                                case 'email':
                                    showError(emailInput, emailError, message);
                                    hasFieldErrors = true;
                                    break;
                                case 'consentProcessing':
                                    showError(consentProcessingCheckbox, consentProcessingError, message);
                                    hasFieldErrors = true;
                                    break;
                                default:
                                    // Show general error for non-field-specific errors
                                    showGeneralError(message);
                            }
                        });
                        
                        // If we have field errors, scroll to the first one
                        if (hasFieldErrors) {
                            const firstError = document.querySelector('.input-error');
                            if (firstError) {
                                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            }
                        }
                    } else {
                        // Show general error message
                        showGeneralError(result.message || 'An error occurred. Please try again.');
                    }
                    
                    // Handle specific error cases
                    if (response.status === 429) {
                        showGeneralError('You have submitted too many requests. Please try again in an hour.');
                    } else if (response.status === 409) {
                        showGeneralError('A submission with this information was already received recently.');
                    } else if (response.status === 403 && result.code === 'CSRF_TOKEN_INVALID') {
                        // Try to refresh CSRF token and retry once
                        try {
                            const csrfResponse = await fetch('/api/csrf-token');
                            if (csrfResponse.ok) {
                                const csrfData = await csrfResponse.json();
                                csrfToken = csrfData.token;
                                sessionId = csrfData.sessionId;
                                showGeneralError('Security token expired. Please try submitting again.');
                            } else {
                                showGeneralError('Security validation failed. Please refresh the page and try again.');
                            }
                        } catch (tokenError) {
                            showGeneralError('Security validation failed. Please refresh the page and try again.');
                        }
                    } else if (response.status === 403) {
                        showGeneralError('Request blocked by security policy. Please refresh the page and try again.');
                    }
                }
                
            } catch (error) {
                console.error('Form submission error:', error);
                showGeneralError('Unable to submit form. Please check your internet connection and try again.');
            } finally {
                // Remove loading state
                setLoadingState(false);
            }
        });
    }
    
    // Email validation helper
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
});
</script>
