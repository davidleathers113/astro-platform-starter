---
// src/components/debt-relief/QualificationForm.astro
---

<div id="qualification-form" class="p-6 sm:p-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg dark:shadow-gray-900 border border-gray-200 dark:border-gray-700 hover:shadow-xl dark:hover:shadow-gray-900/75 transition-all duration-300">
    <h3 class="mb-6 text-xl font-bold text-gray-900 dark:text-white">Quick Debt Relief Check</h3>
    
    <!-- Divider after header -->
    <div class="border-t border-gray-200 dark:border-gray-700 mb-6"></div>
    
    <form id="qualification-form-element" class="space-y-6">
        <div class="form-control animate-fade-in-delay-1">
            <label for="debt-amount" class="block mb-2 font-medium text-gray-900 dark:text-white">How much debt do you have?*</label>
            <select 
                id="debt-amount" 
                name="debtAmount" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                required
            >
                <option value="">Select Amount</option>
                <option value="10000-15000">$10,000 - $15,000</option>
                <option value="15000-25000">$15,000 - $25,000</option>
                <option value="25000-50000">$25,000 - $50,000</option>
                <option value="50000+">$50,000+</option>
            </select>
            <div id="debt-amount-error" class="error-message hidden mt-1"></div>
        </div>
        
        <div class="form-control animate-fade-in-delay-2">
            <label for="debt-type" class="block mb-2 font-medium text-gray-900 dark:text-white">What type of debt do you have?*</label>
            <select 
                id="debt-type" 
                name="debtType" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                required
            >
                <option value="">Select Type</option>
                <option value="credit-cards">Credit Cards</option>
                <option value="personal-loans">Personal Loans</option>
                <option value="medical">Medical Debt</option>
                <option value="mixed">Mixed Unsecured Debt</option>
            </select>
            <div id="debt-type-error" class="error-message hidden mt-1"></div>
        </div>
        
        <div class="form-control animate-fade-in-delay-3">
            <label for="phone" class="block mb-2 font-medium text-gray-900 dark:text-white">Phone Number*</label>
            <input 
                type="tel" 
                id="phone" 
                name="phone" 
                class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md 
                       bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400
                       focus:outline-none focus:ring-2 focus:ring-primary dark:focus:ring-primary-light focus:border-primary dark:focus:border-primary-light
                       transition-colors duration-200 shadow-inner" 
                placeholder="(000) 000-0000" 
                required
                aria-describedby="phone-format"
            />
            <small id="phone-format" class="text-gray-600 dark:text-gray-400">Format: (XXX) XXX-XXXX</small>
            <div id="phone-error" class="error-message hidden mt-1"></div>
        </div>
        
        <!-- Divider before button -->
        <div class="border-t border-gray-200 dark:border-gray-700 pt-4"></div>
        
        <button 
            type="submit" 
            class="w-full p-4 text-center font-bold btn btn-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all animate-pulse-once"
            aria-label="Submit form to check your savings options"
        >
            Check Your Savings Options
        </button>
    </form>
    
    <p class="mt-6 text-xs text-gray-600 dark:text-gray-400 leading-relaxed">
        By submitting, you authorize DebtFreedom to contact you at the number provided using automated technology. 
        Your information is kept secure and confidential.
    </p>
</div>

<style>
    /* Theme-aware container with enhanced depth */
    #qualification-form {
        transition: all var(--theme-transition-duration) var(--theme-transition-easing);
    }
    
    /* Enhanced focus states for better accessibility with theme awareness */
    select:focus, input:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(45, 121, 132, 0.3);
    }
    
    /* Dark mode focus states */
    .dark select:focus, .dark input:focus {
        box-shadow: 0 0 0 3px rgba(88, 203, 224, 0.4);
    }
    
    /* Error states with high contrast and theme awareness */
    .error-message {
        color: #ef4444; /* Light mode error */
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    .dark .error-message {
        color: #fc8181; /* Dark mode error - lighter for better contrast */
    }
    
    .input-error {
        border-color: #ef4444 !important; /* Light mode error border */
    }
    
    .dark .input-error {
        border-color: #fc8181 !important; /* Dark mode error border */
    }
    
    /* Theme-aware placeholder styling */
    input::placeholder {
        transition: color var(--theme-transition-duration) var(--theme-transition-easing);
    }
    
    /* Improve form field appearance on mobile */
    @media (max-width: 640px) {
        select, input {
            font-size: 16px; /* Prevents iOS zoom on focus */
        }
    }
    
    /* Container hover effects with theme awareness */
    #qualification-form:hover {
        transform: translateY(-2px);
    }
    
    /* Divider styling with smooth transitions */
    .border-t {
        transition: border-color var(--theme-transition-duration) var(--theme-transition-easing);
    }
    
    /* Accessibility improvements */
    @media (prefers-reduced-motion: reduce) {
        #qualification-form,
        #qualification-form:hover,
        .border-t,
        input::placeholder {
            transition: none !important;
            transform: none !important;
        }
    }
    
    /* High contrast mode adjustments */
    @media (prefers-contrast: high) {
        #qualification-form {
            border-width: 2px;
        }
        
        select, input {
            border-width: 2px;
        }
    }
</style>

<script>
// Import cleave.js and US phone addon
import Cleave from 'cleave.js';
import 'cleave.js/dist/addons/cleave-phone.us';

// Client-side validation and form handling
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('qualification-form-element');
    const phoneInput = document.getElementById('phone');
    const debtAmountSelect = document.getElementById('debt-amount');
    const debtTypeSelect = document.getElementById('debt-type');
    
    const debtAmountError = document.getElementById('debt-amount-error');
    const debtTypeError = document.getElementById('debt-type-error');
    const phoneError = document.getElementById('phone-error');
    
    // Initialize cleave.js for phone formatting
    let phoneCleave = null;
    if (phoneInput) {
        phoneCleave = new Cleave(phoneInput, {
            phone: true,
            phoneRegionCode: 'US'
        });
        
        // Clear error when user types
        phoneInput.addEventListener('input', () => {
            clearError(phoneInput, phoneError);
        });
    }
    
    // Function to show error
    const showError = (element, errorElement, message) => {
        element.classList.add('input-error');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
    };
    
    // Function to clear error
    const clearError = (element, errorElement) => {
        element.classList.remove('input-error');
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
    };
    
    // Clear errors when user selects an option
    debtAmountSelect && debtAmountSelect.addEventListener('change', () => clearError(debtAmountSelect, debtAmountError));
    debtTypeSelect && debtTypeSelect.addEventListener('change', () => clearError(debtTypeSelect, debtTypeError));
    
    // Form submission
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            let isValid = true;
            
            // Clear any previous errors
            clearError(debtAmountSelect, debtAmountError);
            clearError(debtTypeSelect, debtTypeError);
            clearError(phoneInput, phoneError);
            
            // Validate debt amount
            if (!debtAmountSelect.value) {
                showError(debtAmountSelect, debtAmountError, 'Please select your debt amount');
                isValid = false;
            }
            
            // Validate debt type
            if (!debtTypeSelect.value) {
                showError(debtTypeSelect, debtTypeError, 'Please select your debt type');
                isValid = false;
            }
            
            // Validate phone using cleave.js getRawValue()
            const rawPhone = phoneCleave ? phoneCleave.getRawValue() : phoneInput.value.replace(/\D/g, '');
            if (!rawPhone || rawPhone.length !== 10) {
                showError(phoneInput, phoneError, 'Please enter a valid 10-digit phone number');
                isValid = false;
            }
            
            if (!isValid) {
                return;
            }
            
            // Disable submit button during submission
            const submitButton = form.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Submitting...';
            submitButton.classList.add('opacity-50', 'cursor-not-allowed');
            
            try {
                // Prepare submission data
                const submissionData = {
                    debtAmount: debtAmountSelect.value,
                    debtType: debtTypeSelect.value,
                    phone: rawPhone,
                    consentProcessing: true, // Required for GDPR compliance
                    consentMarketing: false, // Default to false, can be made configurable
                    source: 'qualification-form'
                };
                
                // Submit to API
                const response = await fetch('/api/leads', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(submissionData)
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    // Success - show success message
                    alert('Thank you for your submission! A debt relief specialist will contact you shortly.');
                    
                    // Reset form and cleave instance
                    form.reset();
                    if (phoneCleave) {
                        phoneCleave.setRawValue('');
                    }
                    
                    // Optional: Track success event for analytics
                    console.log('Lead submitted successfully:', result.leadId);
                    
                } else {
                    // Handle API errors
                    if (result.errors) {
                        // Show field-specific errors
                        Object.entries(result.errors).forEach(([field, message]) => {
                            switch (field) {
                                case 'debtAmount':
                                    showError(debtAmountSelect, debtAmountError, message);
                                    break;
                                case 'debtType':
                                    showError(debtTypeSelect, debtTypeError, message);
                                    break;
                                case 'phone':
                                    showError(phoneInput, phoneError, message);
                                    break;
                                default:
                                    // Show general error
                                    alert('Error: ' + message);
                            }
                        });
                    } else {
                        // Show general error message
                        alert(result.message || 'An error occurred. Please try again.');
                    }
                    
                    // Handle rate limiting
                    if (response.status === 429) {
                        alert('You have submitted too many requests. Please try again in an hour.');
                    }
                }
                
            } catch (error) {
                console.error('Form submission error:', error);
                alert('Unable to submit form. Please check your connection and try again.');
            } finally {
                // Re-enable submit button
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        });
    }
});
</script>
