---
import '../styles/globals.css';
import '../styles/print.css';
import '@fontsource-variable/inter/wght.css';
import interWoff2 from '@fontsource-variable/inter/files/inter-latin-wght-normal.woff2?url';
import LandingHeader from '../components/debt-relief/LandingHeader.astro';
import Footer from '../components/Footer.astro';

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="custom-scrollbar">
    <head>
        <meta charset="UTF-8" />
        <title>{title}</title>
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="preload" as="font" type="font/woff2" href={interWoff2} crossorigin />
        <!-- Additional meta tags for landing page SEO -->
        <meta name="description" content="Professional debt settlement program to help you reduce what you owe and become debt-free faster than making minimum payments." />
        <meta property="og:title" content="Debt Freedom Toolkit - Break Free From Credit Card Debt" />
        <meta property="og:description" content="Our professional debt settlement program can help you reduce what you owe and become debt-free faster than making minimum payments." />
        <meta property="og:url" content="https://debtfreedomtoolkit.com" />
        <link rel="canonical" href="https://debtfreedomtoolkit.com" />
        
        <!-- Theme Manager Script - executed before page renders to prevent FOUC -->
        <script is:inline>
            // Immediate theme application to prevent FOUC (Flash of Unstyled Content)
            (function () {
                // Theme constants
                const THEMES = { LIGHT: 'light', DARK: 'dark', SYSTEM: 'system' };
                const STORAGE_KEY = 'theme';
                
                // Utility functions
                function getStorageItem(key, fallback) {
                    try {
                        return localStorage.getItem(key) || fallback;
                    } catch (error) {
                        console.warn('localStorage access failed:', error);
                        return fallback;
                    }
                }
                
                function getSystemPreference() {
                    try {
                        return window.matchMedia('(prefers-color-scheme: dark)').matches 
                            ? THEMES.DARK 
                            : THEMES.LIGHT;
                    } catch (error) {
                        console.warn('Media query not supported:', error);
                        return THEMES.LIGHT;
                    }
                }
                
                function applyTheme(theme) {
                    try {
                        const documentElement = document.documentElement;
                        const shouldUseDarkMode = theme === THEMES.DARK || 
                            (theme === THEMES.SYSTEM && getSystemPreference() === THEMES.DARK);
                        
                        // Remove all theme classes
                        documentElement.classList.remove('dark', 'dark-theme', 'light-theme');
                        
                        // Apply appropriate theme classes
                        if (shouldUseDarkMode) {
                            documentElement.classList.add('dark', 'dark-theme');
                            documentElement.setAttribute('data-theme', THEMES.DARK);
                        } else {
                            documentElement.classList.add('light-theme');
                            documentElement.setAttribute('data-theme', THEMES.LIGHT);
                        }
                    } catch (error) {
                        console.error('Theme application failed:', error);
                    }
                }
                
                // Get and apply initial theme
                const storedTheme = getStorageItem(STORAGE_KEY, THEMES.SYSTEM);
                applyTheme(storedTheme);
                
                // Basic theme manager for immediate availability
                window.themeManager = {
                    getTheme: function() {
                        return getStorageItem(STORAGE_KEY, THEMES.SYSTEM);
                    },
                    setTheme: function(theme) {
                        if (!Object.values(THEMES).includes(theme)) {
                            console.warn('Invalid theme value:', theme);
                            return;
                        }
                        try {
                            localStorage.setItem(STORAGE_KEY, theme);
                            applyTheme(theme);
                            
                            // Dispatch theme change event
                            const resolvedTheme = theme === THEMES.SYSTEM ? getSystemPreference() : theme;
                            window.dispatchEvent(new CustomEvent('theme-change', {
                                detail: { theme, resolvedTheme }
                            }));
                        } catch (error) {
                            console.error('Theme setting failed:', error);
                        }
                    },
                    THEMES: THEMES
                };
            })();
        </script>
    </head>
    <body class="antialiased text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-900">
        <div class="flex flex-col min-h-screen px-4 sm:px-8 md:px-12 relative bg-white dark:bg-gray-900 transition-colors duration-300">
            <!-- Background Pattern -->
            <div class="absolute inset-0 overflow-hidden pointer-events-none">
                <div class="fixed inset-0 z-0">
                    <!-- Light mode gradients (hidden in dark mode) -->
                    <div class="absolute top-0 left-0 right-0 h-[500px] bg-gradient-to-b from-primary/5 to-transparent dark:hidden transition-opacity duration-300"></div>
                    <div class="absolute bottom-0 left-0 right-0 h-[300px] bg-gradient-to-t from-primary/5 to-transparent dark:hidden transition-opacity duration-300"></div>

                    <!-- Dark mode gradients (hidden in light mode) -->
                    <div class="absolute top-0 left-0 right-0 h-[500px] bg-gradient-to-b from-primary-light/10 to-transparent hidden dark:block transition-opacity duration-300"></div>
                    <div class="absolute bottom-0 left-0 right-0 h-[300px] bg-gradient-to-t from-primary-light/10 to-transparent hidden dark:block transition-opacity duration-300"></div>

                    <!-- Noise texture overlay -->
                    <div class="absolute inset-0 opacity-20 dark:opacity-30 bg-noise"></div>
                </div>
            </div>
            
            <div class="flex flex-col w-full max-w-5xl mx-auto grow py-4 sm:py-6 md:py-8 relative z-10">
                <LandingHeader />
                <main class="grow"><slot /></main>
                <Footer />
            </div>
        </div>
    </body>
</html>

<style>
    .bg-noise {
        background-image: var(--background-image-noise);
    }

    /* Use CSS variables defined in globals.css for theme-specific noise pattern */
    :root {
        --background-image-noise: linear-gradient(to bottom, rgba(250, 250, 255, 0.05), rgba(250, 250, 255, 0.1)), url('/images/noise.png');
    }

    .dark {
        --background-image-noise: linear-gradient(to bottom, rgba(10, 15, 25, 0.1), rgba(10, 15, 25, 0.2)), url('/images/noise.png');
    }
    
    /* Improve font rendering */
    body {
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    
    /* Smooth scrolling for better UX */
    html {
        scroll-behavior: smooth;
    }
    
    /* Ensure proper page height on mobile */
    @media (max-width: 640px) {
        html, body {
            min-height: 100%;
            height: -webkit-fill-available;
        }
    }
    
    /* Ensure proper spacing on various device sizes */
    @media (min-width: 1280px) {
        .max-w-5xl {
            max-width: 64rem;
        }
    }
    
    /* Prevent content from being too wide on extra large screens */
    @media (min-width: 1536px) {
        body {
            font-size: 1.05rem;
        }
    }
    
    /* Handle iOS-specific issues */
    @supports (-webkit-touch-callout: none) {
        .min-h-screen {
            min-height: -webkit-fill-available;
        }
    }
</style>
